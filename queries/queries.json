[
    {
        "name": "select_all_without_where",
        "description": "select * queries that do not contain a WHERE clause",
        "query": "SELECT query_id, user_name, query_text FROM snowflake.account_usage.query_history WHERE query_text ILIKE 'SELECT *' AND query_text NOT ILIKE '%WHERE%';"
    },
    {
        "name": "copy_into_select_all",
        "description": "COPY INTO and select * in a single query.",
        "query": "SELECT query_id, user_name, query_text FROM snowflake.account_usage.query_history WHERE query_text ILIKE 'COPY INTO%' AND query_text ILIKE 'SELECT *%';"
    },
    {
        "name": "show_tables",
        "description": "Performing a show tables query",
        "query": "SELECT query_id, user_name, query_text FROM snowflake.account_usage.query_history WHERE query_text ILIKE 'SHOW TABLES';"
    },
    {
        "name": "create_temp_storage",
        "description": "",
        "query": "SELECT query_id, user_name, query_text FROM snowflake.account_usage.query_history WHERE query_text ILIKE 'CREATE TEMP%' AND query_text ILIKE '%STORAGE%';"
    },
    {
        "name": "10_largest_queries",
        "description": "Top 10 largest queries by rows_produced",
        "query": "SELECT query_id, user_name, query_text, rows_produced FROM snowflake.account_usage.query_history WHERE rows_produced > 2000 ORDER BY rows_produced DESC LIMIT 10;"
    },
    {
        "name": "dbeaver_used",
        "description": "DBEAVER Usage",
        "query": "SELECT created_on, user_name, authentication_method, PARSE_JSON(client_environment) :APPLICATION :: STRING AS client_application, PARSE_JSON(client_environment) :OS :: STRING AS client_os, PARSE_JSON(client_environment) :OS_VERSION :: STRING AS client_os_version, session_id FROM snowflake.account_usage.sessions, WHERE PARSE_JSON(CLIENT_ENVIRONMENT):APPLICATION = 'DBeaver_DBeaverUltimate' ORDER BY CREATED_ON;"
    },
    {
        "name": "accountadmin_changes",
        "description": "Role grants",
        "query": "select user_name || ' granted the ' || role_name || ' role on ' || end_time ||' [' || query_text ||']' as Grants from snowflake.account_usage.query_history where execution_status = 'SUCCESS' and query_type = 'GRANT' and query_text ilike '%grant%accountadmin%to%' order by end_time desc;"
    },
    {
        "name": "impactful_modifications",
        "description": "Impactful modifications",
        "query": "SELECT start_time, user_name, role_name, query_type, query_text FROM snowflake.account_usage.query_history WHERE execution_status = 'SUCCESS' AND query_type NOT in ('SELECT') AND query_type NOT in ('SHOW') AND query_type NOT in ('DESCRIBE') AND (query_text ILIKE '%create role%' OR query_text ILIKE '%manage grants%' OR query_text ILIKE '%create integration%' OR query_text ILIKE '%alter integration%' OR query_text ILIKE '%create share%' OR query_text ILIKE '%create account%' OR query_text ILIKE '%monitor usage%' OR query_text ILIKE '%ownership%' OR query_text ILIKE '%drop table%' OR query_text ILIKE '%drop database%' OR query_text ILIKE '%create stage%' OR query_text ILIKE '%drop stage%' OR query_text ILIKE '%alter stage%' OR query_text ILIKE '%create user%' OR query_text ILIKE '%alter user%' OR query_text ILIKE '%drop user%' OR query_text ILIKE '%create_network_policy%' OR query_text ILIKE '%alter_network_policy%' OR query_text ILIKE '%drop_network_policy%' OR query_text ILIKE '%copy%' ) ORDER BY end_time desc;"
    },
    {
        "name": "least_common_applications_used",
        "description": "Applications by prevelance",
        "query": "SELECT COUNT(*) AS client_app_count, PARSE_JSON(client_environment) :APPLICATION :: STRING AS client_application, PARSE_JSON(client_environment) :OS :: STRING AS client_os, PARSE_JSON(client_environment) :OS_VERSION :: STRING AS client_os_version FROM snowflake.account_usage.sessions sessions WHERE 1 = 1 AND sessions.created_on >= '2024-04-01' GROUP BY ALL ORDER BY 1 DESC;"
    },
    {
        "name": "copy_http",
        "description": "A Query containing COPY INTO and http keyword",
        "query": "SELECT start_time, query_id, user_name, query_text FROM snowflake.account_usage.query_history WHERE CONTAINS(QUERY_TEXT, 'COPY INTO') AND CONTAINS(QUERY_TEXT, 'http');"
    },
    {
        "name": "get_file",
        "description": "Get file contents",
        "query": "SELECT start_time, query_id, user_name, query_text FROM snowflake.account_usage.query_history WHERE query_text ilike '%GET' AND query_text ilike '%file:%';"
    },
    {
        "name": "session_usage",
        "description": "",
        "query": "SELECT COUNT(*) AS client_app_count, PARSE_JSON(client_environment) :APPLICATION :: STRING AS client_application, PARSE_JSON(client_environment) :OS :: STRING AS client_os, PARSE_JSON(client_environment) :OS_VERSION :: STRING AS client_os_version FROM snowflake.account_usage.sessions sessions WHERE sessions.created_on >= '2024-04-01' GROUP BY ALL ORDER BY 1 ASC;"
    },
    {
        "name": "frostbite_used",
        "description": "FROSTBITE usage",
        "query": "SELECT created_on, user_name, authentication_method, PARSE_JSON(client_environment) :APPLICATION :: STRING AS client_application, PARSE_JSON(client_environment) :OS :: STRING AS client_os, PARSE_JSON(client_environment) :OS_VERSION :: STRING AS client_os_version, session_id FROM snowflake.account_usage.sessions, WHERE PARSE_JSON(CLIENT_ENVIRONMENT):APPLICATION = 'rapeflake' ORDER BY CREATED_ON;"
    },
    {
        "name": "change_queries_per_user_per_day",
        "description": "Looks for the number of change query occurrences per day, per each user.",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, q.USER_NAME AS USER_N, q.QUERY_TYPE as QUERY_TYPE, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS UNIQ_OP_SYS, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP, FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE (     upper(QUERY_TEXT) LIKE '%CREATE USER%' OR     upper(QUERY_TEXT) LIKE '%ALTER USER%' OR     upper(QUERY_TEXT) LIKE '%ALTER ACCOUNT%' OR     upper(QUERY_TEXT) LIKE '%ALTER PASSWORD POLICY%' OR     upper(QUERY_TEXT) LIKE '%APPLY PASSWORD POLICY%' OR     upper(QUERY_TEXT) LIKE '%GRANT USAGE%' OR     upper(QUERY_TEXT) LIKE '%GRANT CREATE%' OR     upper(QUERY_TEXT) LIKE '%GRANT APPLY%' OR     upper(QUERY_TEXT) LIKE '%SHOW GRANT%' OR     upper(QUERY_TEXT) LIKE '%GRANT ROLE%' ) OR QUERY_TYPE IN ('CREATE_USER', 'ALTER_ACCOUNT', 'GRANT', 'ALTER_USER') GROUP BY QUERY_DATE, USER_N, q.QUERY_TYPE ORDER BY QUERY_DATE DESC"
    },
    {
        "name": "abnormal_table_and_db_access",
        "description": "Abnormal Table and DB Access per user per day",
        "query": "WITH sq AS ( SELECT START_TIME, DATE(START_TIME) AS QUERY_DATE, QUERY_HASH, QUERY_TEXT, q.USER_NAME, SESSION_ID, REGEXP_REPLACE(REGEXP_SUBSTR(QUERY_TEXT, $$FROM.*\\W([\\w]+\\.[^\\s]+\\.[\\w]+).*$$,1,1,'mse'),'\"','') as DB_S_TV_STR, CASE WHEN UPPER(QUERY_TEXT) LIKE '%COUNT(%' THEN 'TRUE' ELSE 'FALSE' END as IS_COUNT_Q FROM snowflake.account_usage.query_history q WHERE EXECUTION_STATUS = 'SUCCESS' AND (upper(QUERY_TEXT) LIKE 'SELECT%' OR upper(QUERY_TEXT) LIKE 'COPY INTO%') AND upper(QUERY_TEXT) LIKE '%FROM%' AND NOT REGEXP_LIKE(UPPER(QUERY_TEXT),'.*INFORMATION_SCHEMA.*','s')) SELECT COUNT(DISTINCT sq.QUERY_HASH) AS UNIQ_QUERIES, COUNT(DISTINCT l.USER_NAME) AS UNIQ_USER, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APPS, COUNT(DISTINCT sq.SESSION_ID) AS UNIQ_SESSION, SPLIT_PART(DB_S_TV_STR, '.', 1) AS target_DB, SPLIT_PART(DB_S_TV_STR, '.', 2) AS target_schema, SPLIT_PART(DB_S_TV_STR, '.', 3) AS target_table, sq.USER_NAME as USER_N, FROM sq JOIN snowflake.account_usage.sessions s ON s.session_id = sq.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE sq.IS_COUNT_Q = 'FALSE' AND DB_S_TV_STR IS NOT NULL AND NOT REGEXP_INSTR(DB_S_TV_STR, '\\\\d') AND NOT REGEXP_INSTR(target_DB, '\\\\d') AND NOT REGEXP_INSTR(target_schema, '\\\\d') AND NOT REGEXP_INSTR(target_table, '\\\\d') GROUP BY QUERY_DATE, USER_N, target_DB, target_schema, target_table"
    },
    {
        "name": "user_creation_sorted_by_latest",
        "description": "Lists all users, sorted by the one created the latest",
        "query": "SELECT * FROM snowflake.account_usage.users ORDER BY CREATED_ON DESC"
    },
    {
        "name": "query_occurance_per_user_app",
        "description": "List query count, ip and system used per user per app used",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, q.USER_NAME as USER_N, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS ARR_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, ARRAY_UNIQUE_AGG(l.CLIENT_IP)AS ARR_IP, FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID GROUP BY QUERY_DATE, USER_N, ARR_APP_NAME ORDER BY QUERY_DATE DESC"
    },
    {
        "name": "query_type_error_counts",
        "description": "Get the query errors by user and IP",
        "query": "WITH FAIL_DATES AS ( SELECT l.CLIENT_IP AS IP, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_FAIL_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS LATEST_FAIL_UTC, COUNT( DISTINCT DATE(START_TIME)) AS FAIL_DAY_COUNT, q.user_name AS USER_N FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE EXECUTION_STATUS = 'FAIL' GROUP BY IP, user_n) SELECT CLIENT_IP, FAIL_DATES.USER_N as USER_N, COUNT( DISTINCT DATE(START_TIME)) AS DAY_COUNT, SUM(FAIL_DAY_COUNT) AS FAIL_DAY_COUNT, COUNT_IF(EXECUTION_STATUS = 'FAIL') AS FAIL_COUNT, COUNT_IF(EXECUTION_STATUS = 'SUCCESS') AS SUCCESS_COUNT, COUNT(EXECUTION_STATUS) AS HIT_COUNT, TO_NUMBER((FAIL_COUNT/HIT_COUNT)*100, 10, 2) AS FAIL_RATE, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID JOIN FAIL_DATES ON FAIL_DATES.IP = l.CLIENT_IP GROUP BY CLIENT_IP, USER_N ORDER BY CLIENT_IP"
    },
    {
        "name": "query_type_error_counts_by_user_date_code",
        "description": "Error Count, Code by User, Date, Select Code Inclusions",
        "query": "SELECT l.USER_NAME AS USERNAME, DATE(START_TIME) AS QUERY_DATE, q.ERROR_CODE AS Q_ERR_CODE, COUNT( DISTINCT CLIENT_IP) AS UNIQ_IP, COUNT(DISTINCT q.ERROR_CODE) AS UNIQ_CODES, COUNT(DISTINCT q.ERROR_MESSAGE) AS UNIQ_MSG, COUNT(q.ERROR_MESSAGE) AS ERR_COUNT, TO_NUMBER((UNIQ_CODES/UNIQ_MSG)*100, 10, 2) AS UNIQ_CODE_MSG_RATE, TO_NUMBER((UNIQ_MSG/ERR_COUNT)*100, 10, 2) AS UNIQ_MSG_TOTAL_RATE FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE EXECUTION_STATUS = 'FAIL' AND q.ERROR_CODE IN ('<Code 1>','<Code 2>','<Code 3>','<Code 4>') GROUP BY QUERY_DATE, USERNAME, Q_ERR_CODE"
    },
    {
        "name": "resource_consumption_by_user",
        "description": "Identify Resource Consumption per User",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, l.USER_NAME AS USERNAME, SUM(BYTES_WRITTEN) AS BYTES_WRITTEN, SUM(BYTES_WRITTEN_TO_RESULT) AS BYTES_WRITTEN_TO_RESULT, SUM(BYTES_READ_FROM_RESULT) AS BYTES_READ_FROM_RESULT, SUM(ROWS_PRODUCED) AS ROWS_PRODUCED, SUM(ROWS_INSERTED) AS ROWS_INSERTED, SUM(ROWS_UPDATED) AS ROWS_UPDATED, SUM(ROWS_DELETED) AS ROWS_DELETED, SUM(ROWS_UNLOADED) AS ROWS_UNLOADED, SUM(ROWS_WRITTEN_TO_RESULT) AS ROWS_WRITTEN_TO_RESULT, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)) ,'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID GROUP BY QUERY_DATE, USERNAME ORDER BY QUERY_DATE DESC"
    },
    {
        "name": "queries_with_too_much_execution_time",
        "description": "Identify Queries after 4th of April 2024 with most execution time",
        "query": "SELECT q.USER_NAME, COUNT (DISTINCT QUERY_TEXT) AS UNIQUE_QUERIES, COUNT (QUERY_TEXT) AS TOTAL_QUERIES, MIN(START_TIME) AS EARLIEST, MAX (START_TIME) AS LATEST, DATEDIFF(second, EARLIEST, LATEST) AS QUERY_TIME, COUNT (DISTINCT DATE (START_TIME) ) AS DAY_COUNT, ARRAY_UNIQUE_AGG (CLIENT_IP) AS ARR_UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE START_TIME > '4/1/2024' AND q.total_elapsed_time >  (SELECT AVG(TOTAL_ELAPSED_TIME)  FROM snowflake.account_usage.query_history q  WHERE START_TIME > '4/1/2024') GROUP BY q.USER_NAME"
    },
    {
        "name": "queries_with_data_compression_per_user",
        "description": "Stats on Queries with Data Compression per User",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, l.USER_NAME AS USERNAME, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS UNIQ_OS, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE (upper(QUERY_TEXT) LIKE '%COPY FILE%') OR (upper(QUERY_TEXT) LIKE '%COPY INTO%') GROUP BY QUERY_DATE, USERNAME;"
    },
    {
        "name": "queries_with_data_compression_per_ip",
        "description": "Stats on Queries with Data Compression per IP",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, l.CLIENT_IP AS IP, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS UNIQ_OS, COUNT(DISTINCT l.USER_NAME) AS UNIQ_USER, ARRAY_UNIQUE_AGG(l.USER_NAME) AS ARR_USER, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( (upper(QUERY_TEXT) LIKE '%COPY FILE%') OR (upper(QUERY_TEXT) LIKE '%COPY INTO%') ) GROUP BY QUERY_DATE, l.CLIENT_IP;"
    },
    {
        "name": "queries_with_data_compression_per_app",
        "description": "Stats on Queries with Data Compression per Applications Used",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS APPLICATION_NAME, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS UNIQ_OS, COUNT(DISTINCT l.USER_NAME) AS UNIQ_USER, ARRAY_UNIQUE_AGG(l.USER_NAME) AS ARR_USER, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( (upper(QUERY_TEXT) LIKE '%COPY FILE%') OR (upper(QUERY_TEXT) LIKE '%COPY INTO%') ) GROUP BY QUERY_DATE, APPLICATION_NAME;"
    },
    {
        "name": "queries_with_data_staging_per_user",
        "description": "Stats on Queries with Data Staging per User",
        "query": "SELECT l.USER_NAME AS USERNAME, q.QUERY_TYPE, DATE(q.START_TIME) AS QUERY_DATE, COUNT(DISTINCT q.QUERY_HASH) AS UNIQUE_QUERIES, COUNT(q.QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', q.START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', q.START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(q.START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( upper(q.QUERY_TEXT) LIKE '%ALTER STAGE%' OR upper(q.QUERY_TEXT) LIKE '%ALTER VOLUME%' OR upper(q.QUERY_TEXT) LIKE '%CREATE STAGE%' OR upper(q.QUERY_TEXT) LIKE '%CREATE VOLUME%' OR upper(q.QUERY_TEXT) LIKE '%LS %' OR upper(q.QUERY_TEXT) LIKE '%DROP %' ) GROUP BY l.USER_NAME, q.QUERY_TYPE, DATE(q.START_TIME);"
    },
    {
        "name": "queries_with_data_staging_per_ip",
        "description": "Stats on Queries with Data Staging per IP Address",
        "query": "SELECT l.CLIENT_IP AS IP, q.QUERY_TYPE, DATE(q.START_TIME) AS QUERY_DATE, COUNT(DISTINCT q.QUERY_HASH) AS UNIQUE_QUERIES, COUNT(q.QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', q.START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', q.START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(q.START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT l.USER_NAME) AS UNIQ_USER, ARRAY_UNIQUE_AGG(l.USER_NAME) AS ARR_USER FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( upper(q.QUERY_TEXT) LIKE '%ALTER STAGE%' OR upper(q.QUERY_TEXT) LIKE '%ALTER VOLUME%' OR upper(q.QUERY_TEXT) LIKE '%CREATE STAGE%' OR upper(q.QUERY_TEXT) LIKE '%CREATE VOLUME%' OR upper(q.QUERY_TEXT) LIKE '%LS %' OR upper(q.QUERY_TEXT) LIKE '%DROP %' ) GROUP BY l.CLIENT_IP, q.QUERY_TYPE, DATE(q.START_TIME);"
    },
    {
        "name": "queries_with_data_staging_per_app",
        "description": "Stats on Queries with Data Staging per Applications Used",
        "query": "SELECT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS APPLICATION_NAME, q.QUERY_TYPE, DATE(q.START_TIME) AS QUERY_DATE, COUNT(DISTINCT q.QUERY_HASH) AS UNIQUE_QUERIES, COUNT(q.QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', q.START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', q.START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(q.START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT l.USER_NAME) AS UNIQ_USER, ARRAY_UNIQUE_AGG(l.USER_NAME) AS ARR_USER, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( upper(q.QUERY_TEXT) LIKE '%ALTER STAGE%' OR upper(q.QUERY_TEXT) LIKE '%ALTER VOLUME%' OR upper(q.QUERY_TEXT) LIKE '%CREATE STAGE%' OR upper(q.QUERY_TEXT) LIKE '%CREATE VOLUME%' OR upper(q.QUERY_TEXT) LIKE '%LS %' OR upper(q.QUERY_TEXT) LIKE '%DROP %' ) GROUP BY APPLICATION_NAME, q.QUERY_TYPE, DATE(q.START_TIME);"
    },
    {
        "name": "queries_involving_data_streams_per_user",
        "description": "Stats on Queries Involving Data Streams per User",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, l.USER_NAME AS USERNAME, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( (upper(QUERY_TEXT) LIKE '%CREATE STREAM%' OR upper(QUERY_TEXT) LIKE '%ALTER STREAM%') OR QUERY_TYPE IN ('CREATE_STREAM', 'ALTER_STREAM') ) GROUP BY QUERY_DATE, l.USER_NAME;"
    },
    {
        "name": "queries_involving_data_streams_per_app",
        "description": "Stats on Queries Involving Data Streams per Application",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS APPLICATION_NAME, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( (upper(QUERY_TEXT) LIKE '%CREATE STREAM%' OR upper(QUERY_TEXT) LIKE '%ALTER STREAM%') OR QUERY_TYPE IN ('CREATE_STREAM', 'ALTER_STREAM') ) GROUP BY QUERY_DATE, APPLICATION_NAME;"
    },
    {
        "name": "queries_involving_data_streams_per_ip",
        "description": "Stats on Queries Involving Data Streams per IP Address",
        "query": "SELECT DATE(START_TIME) AS QUERY_DATE, l.CLIENT_IP AS IP, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE ( (upper(QUERY_TEXT) LIKE '%CREATE STREAM%' OR upper(QUERY_TEXT) LIKE '%ALTER STREAM%') OR QUERY_TYPE IN ('CREATE_STREAM', 'ALTER_STREAM') ) GROUP BY QUERY_DATE, l.CLIENT_IP;"
    },
    {
        "name": "queries_involving_data_retrival_per_user",
        "description": "Stats on Queries Involving Data Retrieval per User",
        "query": "SELECT l.USER_NAME AS USERNAME, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, TO_NUMBER((COUNT(QUERY_TEXT)/COUNT(DISTINCT DATE(START_TIME))), 10, 2) AS AVG_QUERY_PER_DAY, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE upper(QUERY_TEXT) LIKE '%PUT FILES%' OR upper(QUERY_TEXT) LIKE '%GET FILES%' OR QUERY_TYPE = 'GET_FILES' GROUP BY l.USER_NAME;"
    },
    {
        "name": "queries_involving_data_retrival_per_ip",
        "description": "Stats on Queries Involving Data Retrieval per IP Address",
        "query": "SELECT l.CLIENT_IP AS IP, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, TO_NUMBER((COUNT(QUERY_TEXT) / COUNT(DISTINCT DATE(START_TIME))), 10, 2) AS AVG_QUERY_PER_DAY, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(l.USER_NAME) AS ARR_USER, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE (upper(QUERY_TEXT) LIKE '%PUT FILES%') OR upper(QUERY_TEXT) LIKE '%GET FILES%' OR QUERY_TYPE = 'GET_FILES' GROUP BY l.CLIENT_IP;"
    },
    {
        "name": "queries_involving_data_retrival_per_app",
        "description": "Stats on Queries Involving Data Retrieval per App",
        "query": "SELECT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS APPLICATION_NAME, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, TO_NUMBER((COUNT(QUERY_TEXT) / COUNT(DISTINCT DATE(START_TIME))), 10, 2) AS AVG_QUERY_PER_DAY, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(l.USER_NAME) AS ARR_USER, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID WHERE upper(QUERY_TEXT) LIKE '%PUT FILES%' OR upper(QUERY_TEXT) LIKE '%GET FILES%' OR QUERY_TYPE = 'GET_FILES' GROUP BY APPLICATION_NAME;"
    },
    {
        "name": "logon_attempts_count_by_ip",
        "description": "Identify Logon Attempts (Failed and Successful)",
        "query": "WITH FAIL_IPS AS ( SELECT l.CLIENT_IP AS IP FROM snowflake.account_usage.login_history l WHERE NOT IS_SUCCESS = 'YES' GROUP BY IP ) SELECT DATE(l.EVENT_TIMESTAMP) AS QUERY_DATE, l.CLIENT_IP AS IP, COUNT(DISTINCT l.USER_NAME) AS UNIQ_USERS, COUNT_IF(l.IS_SUCCESS = 'YES') AS SUCCEED_COUNT, COUNT_IF(l.IS_SUCCESS = 'NO') AS FAIL_COUNT FROM snowflake.account_usage.login_history l JOIN FAIL_IPS f ON f.IP = l.CLIENT_IP GROUP BY QUERY_DATE, l.CLIENT_IP;"
    },
    {
        "name": "abnormal_app_names",
        "description": "Abnormal Application Names",
        "query": "SELECT REPORTED_CLIENT_TYPE, JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS APPLICATION_NAME, SPLIT_PART(CLIENT_APPLICATION_ID, ' ', 1) AS APP_NAME_TMP, CASE WHEN REGEXP_LIKE(CLIENT_APPLICATION_ID, 'Snowflake UI .+') THEN 'N/A' ELSE CLIENT_APPLICATION_VERSION END AS APP_VERSION, l.USER_NAME AS USERNAME, COUNT(CLIENT_APPLICATION_VERSION) AS HIT_COUNT, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS UNIQ_OS, ARRAY_UNIQUE_AGG(l.CLIENT_IP) AS ARR_IP, COUNT(DISTINCT l.CLIENT_IP) AS UNIQ_IP FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID GROUP BY REPORTED_CLIENT_TYPE, APPLICATION_NAME, APP_NAME_TMP, APP_VERSION, l.USER_NAME ORDER BY UNIQ_IP DESC;"
    },
    {
        "name": "average_user_session_by_user",
        "description": "Average User Sessions stacked by user",
        "query": "SELECT l.USER_NAME AS USERNAME, DATE(START_TIME) AS QUERY_DATE, COUNT(DISTINCT s.SESSION_ID) AS UNIQ_SESSIONS, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID GROUP BY l.USER_NAME, DATE(START_TIME);"
    },
    {
        "name": "average_user_session_by_ip",
        "description": "Average User Sessions stacked by IP",
        "query": "SELECT l.CLIENT_IP AS IP, DATE(START_TIME) AS QUERY_DATE, COUNT(DISTINCT s.SESSION_ID) AS UNIQ_SESSIONS, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID GROUP BY l.CLIENT_IP, DATE(START_TIME);"
    },
    {
        "name": "average_user_session_by_app",
        "description": "Average User Sessions stacked by App",
        "query": "SELECT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION') AS APPLICATION_NAME, DATE(START_TIME) AS QUERY_DATE, COUNT(DISTINCT s.SESSION_ID) AS UNIQ_SESSIONS, COUNT(DISTINCT QUERY_HASH) AS UNIQUE_QUERIES, COUNT(QUERY_TEXT) AS TOTAL_QUERIES, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS EARLIEST_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', START_TIME)), 'yyyy-mm-dd hh24:mi:ss') AS LATEST_UTC, COUNT(DISTINCT DATE(START_TIME)) AS DAY_COUNT, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS ARR_APP_NAME, COUNT(DISTINCT JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'APPLICATION')) AS UNIQ_APP_NAME, ARRAY_UNIQUE_AGG(JSON_EXTRACT_PATH_TEXT(s.CLIENT_ENVIRONMENT, 'OS')) AS ARR_OP_SYS FROM snowflake.account_usage.query_history q JOIN snowflake.account_usage.sessions s ON s.session_id = q.session_id JOIN snowflake.account_usage.login_history l ON l.EVENT_ID = s.LOGIN_EVENT_ID GROUP BY APPLICATION_NAME, DATE(START_TIME);"
    },
    {
        "name": "stage_name_url_where_url_is_not_null",
        "description": "Stage Name and URL Where URL Is not NULL",
        "query": "SELECT STAGE_NAME, STAGE_SCHEMA, STAGE_CATALOG, STAGE_URL, STAGE_REGION, STAGE_TYPE, STAGE_OWNER, TO_VARCHAR(MIN(CONVERT_TIMEZONE('UTC', CREATED)), 'yyyy-mm-dd hh24:mi:ss') AS CREATE_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', LAST_ALTERED)), 'yyyy-mm-dd hh24:mi:ss') AS LAST_ALTERED_UTC, TO_VARCHAR(MAX(CONVERT_TIMEZONE('UTC', DELETED)), 'yyyy-mm-dd hh24:mi:ss') AS DELETED_UTC, COUNT(DISTINCT STAGE_ID) AS UNIQ_STAGE_ID, ARRAY_UNIQUE_AGG(STAGE_ID) AS ARR_STAGE_ID FROM snowflake.account_usage.stages WHERE STAGE_URL IS NOT NULL GROUP BY STAGE_NAME, STAGE_SCHEMA, STAGE_CATALOG, STAGE_URL, STAGE_REGION, STAGE_TYPE, STAGE_OWNER;"
    }
]